package repository

import (
	"context"
	"daisy/domain/{{.modelVar}}/dao"
	"daisy/pkg/database"
)

type {{.Model}}Repository interface {
	FindByID(ctx context.Context, id uint) (*dao.{{.Model}}, error)
	FindAll(ctx context.Context) ([]dao.{{.Model}}, error)
	Paginate(ctx context.Context, limit, offset int) ([]dao.{{.Model}}, int64, error)
	Create(ctx context.Context, data *dao.{{.Model}}) error
	Update(ctx context.Context, data *dao.{{.Model}}) error
	Delete(ctx context.Context, id uint) error
    RunTransaction(ctx context.Context, fn func(ctx context.Context) error) error
}

type {{.modelVar}}Repository struct {
	db database.Connection
}

func New(db database.Connection) {{.Model}}Repository {
	return &{{.modelVar}}Repository{
		db: db,
	}
}

func (r *{{.modelVar}}Repository) RunTransaction(ctx context.Context, fn func(ctx context.Context) error) error {
	return r.db.Run(ctx, fn)
}

func (r *{{.modelVar}}Repository) FindByID(ctx context.Context, id uint) (*dao.{{.Model}}, error) {
	var data dao.{{.Model}}
	err := r.db.Get(ctx).First(&data, id).Error
	if err != nil {
		return nil, err
	}
	return &data, nil
}

func (r *{{.modelVar}}Repository) FindAll(ctx context.Context) ([]dao.{{.Model}}, error) {
	var list []dao.{{.Model}}
	err := r.db.Get(ctx).Find(&list).Error
	if err != nil {
		return nil, err
	}
	return list, nil
}

func (r *{{.modelVar}}Repository) Paginate(ctx context.Context, limit, offset int) ([]dao.{{.Model}}, int64, error) {
	var list []dao.{{.Model}}
	var total int64

	tx := r.db.Get(ctx)
	if err := tx.Model(&dao.{{.Model}}{}).Count(&total).Error; err != nil {
		return nil, 0, err
	}

	err := tx.Limit(limit).Offset(offset).Order("created_at desc").Find(&list).Error
	return list, total, err
}

func (r *{{.modelVar}}Repository) Create(ctx context.Context, data *dao.{{.Model}}) error {
	return r.db.Get(ctx).Create(data).Error
}

func (r *{{.modelVar}}Repository) Update(ctx context.Context, data *dao.{{.Model}}) error {
	return r.db.Get(ctx).Save(data).Error
}

func (r *{{.modelVar}}Repository) Delete(ctx context.Context, id uint) error {
	return r.db.Get(ctx).Delete(&dao.{{.Model}}{}, id).Error
}
